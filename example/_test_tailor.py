#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Sep  6 07:41:03 2019

@author: ubuntu
"""

"""测试泰勒展开式
参考：https://www.matongxue.com/madocs/7/
0. 泰勒展开式本质上是用幂函数的线性组合(m*f(x)+n*g(x)+b)，也就是用多项式函数来代替任何函数.
   说明泰勒展开式是一种万能函数，只要一个函数高阶导数好求解，就能用泰勒展开式得到多项式函数替代原函数。
   之所以用多项式，是因为多项式是一种最常见，人类最容易处理的函数，一下就能计算多项式的结果，而其他函数
   对人类就不容易直接算出来了，比如人类容易算3**6， 但很难算ln(6)或sin(6)，所以用多项式组合函数做万能函数
   最适合人类。
   但最适合人类并不一定最本质？也许用ln(x)做集函数来组合也能得到更优秀的本质？呵呵，瞎想一下，毕竟人类是渺小的。

1. 直觉理解两个幂函数f(x),g(x)线性组合时，如何调整组合的结果：
    - 如果直接相加f(x)+g(x)，则幂级数大的函数值完全压制幂级数小的函数值，基本上得到的函数跟幂级数大的函数接近。
      比如f(x)=x^2, g(x)=x^9，那么在x很小时f(x)对曲线还有影响，但等x很大后，f(x)基本没有影响，
      基本上直接相加组合的函数更靠近g(x), 而跟f(x)基本没关系，因为他被淹没了。
    - 调整方式就是添加阶乘n!，之所以添加阶乘而不是添加别的，是因为实践发现阶乘这个数最适合用于调整。
      比如对f(x)不添加阶乘，而对g(x)添加9!，就相当于g(x)的权重把g(x)的影响基本抵消，此时组合函数非常靠近f(x)
      又比如对f(x)添加阶乘，而对g(x)不添加，那么就会进一步把f(x)在x很小时的影响也淹没，导致组合函数彻底跟g(x)接近。
      所以添加阶乘，就是添加每个函数的权重，去减小该函数的过度影响。

2. 泰勒展开式的基本形式：只要原函数高阶导数可求，就能泰勒展开。
    
    f(x) = f(x0) + f'(x0)*x + (f''(x0)/2!)*x^2 + .... 
         = a0 + a1*x + a2*x^2 (本质就是多项式函数的形式) 

最简单的泰勒多项式展开式，是在0处展开对exp(x)函数的近似
        在x0=0处展开exp(x) = 1 + x + x**2/2 + x**3/3! + ...
        在x0=0处展开sin(x) = x - x**3/3! + x**5/5! - ...


"""

import math
import numpy as np
import matplotlib.pyplot as plt

def f(x):
    return x**2

def g(x):       # 定义
    return x**9

def fg(x):      # 定义多项式组合函数
    return f(x)/math.factorial(2) + g(x)/math.factorial(9)

x = np.arange(-10,10, 0.1)
y1 = f(x)
y2 = g(x)
y3 = fg(x)

plt.figure()
plt.plot(x, y1, label='f=x^2', color='r')
plt.plot(x, y2, label='g=x^9', color='g')
plt.plot(x, y3, label='fg', color='b')

plt.ylim(-100, 100)
plt.legend()
plt.show()